//FIRST(X)
#include<stdio.h>
#include<conio.h>
using namespace std;
char array[10][20],temp[10];
int c,n;
void fun(int,int[]);
int fun2(int i,int j,int p[],int );

int main()
{
   int p[2],i,j;
   printf("Enter the no. of productions :");
   scanf("%d",&n);
   printf("Enter the productions :\n");
   for(i=0;i<n;i++)
   scanf("%s",array[i]);
   for(i=0;i<n;i++)
   {
    c=-1,p[0]=-1,p[1]=-1;
    fun(i,p);
    printf("First(%c) : [ ",array[i][0]);
    for(j=0;j<=c;j++)
    printf("%c,",temp[j]);
    printf("\b ].\n");
    getch();
   }
   return 0;
}

int fun2(int i,int j,int p[],int key)
{
  int k;
  if(!key)
  {
    for(k=0;k<n;k++)
    if(array[i][j]==array[k][0])
    break;
    p[0]=i;p[1]=j+1;
    fun(k,p);
    return 0;
  }
  else
  {
    for(k=0;k<=c;k++)
    {
    if(array[i][j]==temp[k])
    break;
    }
    if(k>c)return 1;
    else return 0;
  }
}
 void fun(int i,int p[])
 {
 int j,k,key;
 for(j=2;array[i][j] != NULL; j++)
 {
 if(array[i][j-1]=='/')
 {
 if(array[i][j]>= 'A' && array[i][j]<='Z')
 {
 key=0;
 fun2(i,j,p,key);
 }
 else
 {
 key = 1;
 if(fun2(i,j,p,key))
 temp[++c] = array[i][j];
 if(array[i][j]== '@'&& p[0]!=-1) //taking '@' as null symbol
 {
 if(array[p[0]][p[1]]>='A' && array[p[0]][p[1]] <='Z')
 {
 key=0;
 fun2(p[0],p[1],p,key);
 }
 else
 if(array[p[0]][p[1]] != '/'&& array[p[0]][p[1]]!=NULL)
 {
 if(fun2(p[0],p[1],p,key))
 temp[++c]=array[p[0]][p[1]];
 }
 }
 }
 }
 }
// return 0;
 }


//INFIX-T0-POST
#include<stdio.h>
#include <ctype.h>
#define SIZE 50

char s[SIZE];
int top = -1;

 void push(char elem) {
 s[++top] = elem;
}

char pop() {
 return (s[top--]);
}

int pr(char elem) {
 switch (elem) {
 case '#':
  return 0;
 case '(':
   return 1;
 case '+':
 case '-':
  return 2;
 case '*':
 case '/':
  return 3;
 }
}
 void pushit(int ele){
 s[++top]=ele;
}

int popit(){
 return(s[top--]);
}

  int main() {
  char infx[50], pofx[50], ch, elem;
 int i = 0, k = 0, op1, op2,ele;
 printf("\n\nRead the Infix Expression   ");
 scanf("%s", infx);
 push('#');
 while ((ch = infx[i++]) != '\0') {
  if (ch == '(')
   push(ch);
  else if (isalnum(ch))
   pofx[k++] = ch;
  else if (ch == ')') {
   while (s[top] != '(')
    pofx[k++] = pop();
   elem = pop();
  } else {
   while (pr(s[top]) >= pr(ch))
    pofx[k++] = pop();
   push(ch);
  }
 }
  while (s[top] != '#')
  pofx[k++] = pop();
 pofx[k] = '\0';
 printf("\n\nGiven Infix Expn: %s  Postfix Expn: %s\n", infx, pofx);

 while( (ch=pofx[i++]) != '\0')
 {
  if(isdigit(ch)) pushit(ch-'0');
  else
  {
   op2=popit();
   op1=popit();
   switch(ch)
   {
   case '+':pushit(op1+op2);break;
   case '-':pushit(op1-op2);break;
   case '*':pushit(op1*op2);break;
   case '/':pushit(op1/op2);break;
   }
  }
 }

  }



//FOLLOW(X)
#include<stdio.h>
#include<conio.h>
#define max 10
#define MAX 15
using namespace std;
void ffun(int,int);
void fun(int,int[]);
void follow(int i);
char array[max][MAX],temp[max][MAX];
int c,n,t;
int fun2(int i,int j,int p[],int key)
{
    int k;
    if(!key){
        for(k=0;k<n;k++)
        if(array[i][j]==array[k][0])
        break;
        p[0]=i;p[1]=j+1;
        fun(k,p);
    return 0;
    }
    else{
        for(k=0;k<=c;k++){
            if(array[i][j]==temp[t][k])
            break;
        }
        if(k>c)return 1;
        else return 0;
    }
}

void fun(int i,int p[])
{
    int j,k,key;
    for(j=2;array[i][j]!=NULL;j++)
    {
        if(array[i][j-1]=='/'){
            if(array[i][j]>='A'&&array[i][j]<='Z'){
            key=0;
            fun2(i,j,p,key);
            }
        else{
            key=1;
            if(fun2(i,j,p,key))
                temp[t][++c]=array[i][j];
            if(array[i][j]=='@'&&p[0]!=-1){ //taking ,@, as null symbol.
                if(array[p[0]][p[1]]>='A'&&array[p[0]][p[1]]<='Z'){
                    key=0;
                    fun2(p[0],p[1],p,key);
                }
            else
                if(array[p[0]][p[1]]!='/'&&array[p[0]][p[1]]!=NULL){
                    if(fun2(p[0],p[1],p,key))
                    temp[t][++c]=array[p[0]][p[1]];
                }
            }
        }
        }
    }
}

char fol[max][MAX],ff[max];int f,l,ff0;
void follow(int i)
{
    int j,k;
    for(j=0;j<=ff0;j++)
        if(array[i][0]==ff[j])
            return;
        if(j>ff0)ff[++ff0]=array[i][0];
            if(i==0)fol[l][++f]='$';
        for(j=0;j<n;j++)
            for(k=2;array[j][k]!=NULL;k++)
                if(array[j][k]==array[i][0])
                    ffun(j,k);
}

void ffun(int j,int k)
{
    int ii,null=0,tt,cc;
    if(array[j][k+1]=='/'||array[j][k+1]==NULL)
        null=1;
    for(ii=k+1;array[j][ii]!='/'&&array[j][ii]!=NULL;ii++){
        if(array[j][ii]<='Z'&&array[j][ii]>='A')
        {
            for(tt=0;tt<n;tt++)
                if(temp[tt][0]==array[j][ii])break;
                    for(cc=1;temp[tt][cc]!=NULL;cc++)
                    {
                        if(temp[tt][cc]=='@')null=1;
                        else fol[l][++f]=temp[tt][cc];
                    }
        }
        else fol[l][++f]=array[j][ii];
    }
    if(null)follow(j);
}

int main()
{
    int p[2],i,j;
    //clrscr();
    printf("Enter the no. of productions :\n");
    scanf("%d",&n);
    printf("Enter the productions :\n");
    for(i=0;i<n;i++)
        scanf("%s",array[i]);
    for(i=0,t=0;i<n;i++,t++){
        c=0,p[0]=-1,p[1]=-1;
        temp[t][0]=array[i][0];
        fun(i,p);
        temp[t][++c]=NULL;
        printf("First(%c) : [ ",temp[t][0]);
        for(j=1;j<c;j++)
            printf("%c,",temp[t][j]);
        printf("\b ].\n");
    }
/* Follow Finding */
    for(i=0,l=0;i<n;i++,l++)
    {
        f=-1;ff0=-1;
        fol[l][++f]=array[i][0];
        follow(i);
        fol[l][++f]=NULL;
    }
    for(i=0;i<n;i++)
    {
        printf("\nFollow[%c] : [ ",fol[i][0]);
        for(j=1;fol[i][j]!=NULL;j++)
            printf("%c,",fol[i][j]);
        printf("\b ]");
    }
    getch();
    return 0;
}

//POST-TO-PRE
#include <stdio.h>
#include <conio.h>
#include <string.h>
#define MAX 50
struct postfix
{
char stack[MAX][MAX], target[MAX] ;
char temp1[2], temp2[2] ;
char str1[MAX], str2[MAX], str3[MAX] ;
int i, top ;
} ;
void initpostfix ( struct postfix * ) ;
void setexpr ( struct postfix *, char * ) ;
void push ( struct postfix *, char * ) ;
void pop ( struct postfix *, char * ) ;
void convert ( struct postfix * ) ;
void show ( struct postfix ) ;
int main( )
{
struct postfix q ;
char expr[MAX] ;
//clrscr( ) ;
initpostfix ( &q ) ;
printf ( "\nEnter an expression in postfix form: " ) ;
gets ( expr ) ;
setexpr ( &q, expr ) ;
convert ( &q ) ;
printf ( "\nThe Prefix expression is: " ) ;
show ( q ) ;
getch( ) ;
}
/* initializes the elements of the structure */
void initpostfix ( struct postfix *p )
{
p -> i = 0 ;
p -> top = -1 ;
strcpy ( p -> target, "" ) ;
}
/* copies given expr. to target string */
void setexpr ( struct postfix *p, char *c )
{
strcpy ( p -> target, c ) ;
}
/* adds an operator to the stack */
void push ( struct postfix *p, char *str )
{
if ( p -> top == MAX - 1 )
printf ( "\nStack is full." ) ;
else
{
p -> top++ ;
strcpy ( p -> stack[p -> top], str ) ;
}
}
/* pops an element from the stack */
void pop ( struct postfix *p, char *a )
{
if ( p -> top == -1 )
printf ( "\nStack is empty." ) ;
else
{
strcpy ( a, p -> stack[p -> top] ) ;
p -> top-- ;
}
}
/* converts given expr. to prefix form */
void convert ( struct postfix *p )
{
while ( p -> target[p -> i] != '\0' )
{
/* skip whitespace, if any */
if ( p -> target[p -> i] == ' ')
p -> i++ ;
if( p -> target[p -> i] == '%' || p -> target[p -> i] == '*' || p -> target[p -> i] == '-' || p -> target[p -> i] == '+' || p -> target[p -> i] == '/' || p -> target[p -> i] == '$' )
{
pop ( p, p -> str2 ) ;
pop ( p, p -> str3 ) ;
p -> temp1[0] = p -> target[ p -> i] ;
p -> temp1[1] = '\0' ;
strcpy ( p -> str1, p -> temp1 ) ;
strcat ( p -> str1, p -> str3 ) ;
strcat ( p -> str1, p -> str2 ) ;
push ( p, p -> str1 ) ;
}
else
{
p -> temp1[0] = p -> target[p -> i] ;
p -> temp1[1] = '\0' ;
strcpy ( p -> temp2, p -> temp1 ) ;
push ( p, p -> temp2 ) ;
}
p -> i++ ;
}
}
/* displays the prefix form of expr. */
void show ( struct postfix p )
{
char *temp = p.stack[0] ;
while ( *temp )
{
printf ( "%c ", *temp ) ;
temp++ ;
}
}

//PRE-TO-POST
#include<iostream>
#include<string.h>
#include<conio.h>
#define MAX 100
using namespace std;
  int count=1;
char e[MAX],b[2*MAX];

int isoperator(char ch){
    return ch=='+' || ch=='-' || ch == '*' ||
	ch == '/' || ch == '$' || ch == '%';
}

void left(char,int);
void right(char,int);

void left(char op,int i){

    if(isoperator(op)){

	b[2*i]=op;
	count++;
	left(e[count],2*i);
	right(e[count],2*i);
    }
    else
    {
	b[2*i]=op;
	count++;
    }
}

void right(char op,int i){

    if(isoperator(op)){

	b[2*i+1]=op;
	count++;
	left(e[count],2*i+1);
	right(e[count],2*i+1);
    }
    else
    {
	b[2*i+1]=op;
	count++;
    }
}

void postorder(int i){
    if(isoperator(b[i]))postorder(2*i);
    if(isoperator(b[i]))postorder(2*i+1);
    cout << b[i] ;

}

int main(){

    cout << "Enter a prefix : ";
    cin >> e;
    int len=strlen(e);

    count=0;
    b[1]=e[count];

    count++;
    left(e[count],1);
    right(e[count],1);

    postorder(1);
    getch();
    return 0;


}

//IDENTIFIER
#include<iostream>
#include<string.h>
#include<ctype.h>
#include<stdio.h>
using namespace std;
int main()
{
    //clrscr();
char c[30];
cout<<"enter string to check"<<endl;
gets(c);
int l=strlen(c);
int i;int f=0;
if(c[0]=='_' || isalpha(c[0]) || c[0]=='$')
{
for(i=1;i<l;i++)
{
if(isalpha(c[i]) ||isdigit(c[i]) || c[i]=='_' || c[i]=='&')
{
f=1;
continue;
}
else
{f=0;
break; }
}}
if(f==1)
cout<<"VALID IDENTIFIER";
else
cout<<"invalid";
//getch();
return 0;
}

//FACTORING
#include<iostream>
#include<cstring>
using namespace std;
int main(){
string s;
string array[20];
int i = 0,j = 0;
cout<<"Enter the productions:"<<endl;
cin>>s;
string s1;
while(i<s.find_last_of('/')){
    array[j] = s.substr(i,(s.find_first_of('/',i)-i));
    i = s.find_first_of('/',i)+1;
j++;
}
array[j] = s.substr(i);
int count = 99;
for(i=1;i<j;i++){
    int temp=0;
    int k=0;
    while(array[i][k]==array[i+1][k])
       {
           temp++;
           k++;
           }
    if(temp<count){
        count=temp;
    }
}
cout<<endl;
cout<<array[0]<<"/"<<array[1].substr(0,count)<<"X"<<endl;
cout<<"X";
for(i = 1;i<=j; i++){
    cout<<"/"<<(array[i].substr(count));
}
return 0;

}

//RECCURSSION
#include<iostream>
#include<cstring>
using namespace std;
int main(){
string s;
cin>>s;
int t2 = s.find_first_of('/',2);
int i = 0;
int t = s.find_first_of('/',0);
while(t<s.size()){
  int t1 = s.find_first_of('/',t+1);
  if(t1>s.size())
    t1 = s.size();
  if(s[t+1]==s[0])
        cout<<"X->"<<s.substr((t+2),t1-t-2)<<"X\n";
  else{
    cout<<s[0]<<"->"<<s.substr(t+1,t1-t-1)<<"X"<<"\n";
  }
        t = t1;
}
cout<<X->@\n;
return 0;
}

//KEYWORD OR CONSTANT
#include<iostream>
#include<string.h>
#include<conio.h>
using namespace std;
int main()
{
char str[50][10]={"int","auto","break","case","char","continue","do","default",
		   "double","else","enum","extern","float","for","goto","if",
		   "int","long","register","return","short","signed","struct"};
char s[10];
int f=0;
cout<<"enter the string\n";
cin>>s;
for(int i=0;i<32;i++)
{
if(strcmp(str[i],s)==0)
{
f=1;
cout<<"keyword";
break;
}
}
if(f==0)
cout<<"\n constant";
//getch();
return 0;
}


